/*By Stephen O'Connor*/


#mainGameContainer{
    display:grid;
    grid-template-columns: 1fr 1fr 1fr;
    /*background-color: lightgray;*/
    margin:0 auto;
    grid-gap:10px;
}

#smallPrint{
    color:white;
    font-size: .8em;
    text-align: center;
}

#wordInput{
    width:100%;
    padding:20px;
    font-size: 2em;
    font-weight: bold;
}

#returnValidation, #returnValidation2{
    font-size:1.4em;
}

#wordInput::placeholder{
    font-style:italic;
    font-size:.8em;
}

/*Initially set to hidden, changed to grid in JS after play is clicked.*/
#secondDiv{
    display:none;
}

#letterReveal{
    display:grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
    grid-template-rows: 50px;
}

#home{
    grid-column: span 3;
}

#title{
    color:white;
    grid-column: span 3;
    font-size:2em;
}

.item{
    font-size:2em;
    opacity:0;/*initially hidden*/
}

/*Following code that does have animation which has been sourced from CoPilot*/
.item.animate{
    animation:fadeIn 1s forwards;
}

/*The use of @keyframes here,
allows for motion styling instead of static styling, which is really just animation.
so basically, in simpler words, a @keywords function is practically an animation function, which applies animation when called in correct context
This function is called called by an elements.animate.animation property and the animation applied to said element.
the breakdown of the animation follows as
-call the fadeIn function
-1s defines the length of the animation
-forwards defines the end result of the animation. In this case it means that the end style is retained by 
 the elements once animation has been complete. Other properties give it different end results.
*/

@keyframes fadeIn{
    from{opacity:0;}
    to{opacity:1;}
}

#firstDiv{

}

/*By Stephen O'Connor*/